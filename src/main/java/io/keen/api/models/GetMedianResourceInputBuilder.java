/*
 * KeenIoLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2016
 */
package io.keen.api.models;

import java.util.*;

public class GetMedianResourceInputBuilder {
    //the instance to build
    private GetMedianResourceInput getMedianResourceInput;

    /**
     * Default constructor to initialize the instance
     */
    public GetMedianResourceInputBuilder() {
        getMedianResourceInput = new GetMedianResourceInput();
    }

    /**
     * The name of the event collection you are analyzing.
     */
    public GetMedianResourceInputBuilder eventCollection(String eventCollection) {
        getMedianResourceInput.setEventCollection(eventCollection);
        return this;
    }

    public GetMedianResourceInputBuilder projectId(String projectId) {
        getMedianResourceInput.setProjectId(projectId);
        return this;
    }

    /**
     * The name of the property you are analyzing.
     */
    public GetMedianResourceInputBuilder targetProperty(String targetProperty) {
        getMedianResourceInput.setTargetProperty(targetProperty);
        return this;
    }

    /**
     * Filters are used to narrow down the events used in an analysis request based on event property values.
     */
    public GetMedianResourceInputBuilder filters(String filters) {
        getMedianResourceInput.setFilters(filters);
        return this;
    }

    /**
     * The group_by parameter specifies the name of a property by which you would like to group the results. Using this parameter changes the response format. Read more about Group By to learn more.
     */
    public GetMedianResourceInputBuilder groupBy(String groupBy) {
        getMedianResourceInput.setGroupBy(groupBy);
        return this;
    }

    /**
     * An Interval specifies the size of time block to break a response into. This will cause a change in the response shape.
     */
    public GetMedianResourceInputBuilder interval(String interval) {
        getMedianResourceInput.setInterval(interval);
        return this;
    }

    /**
     * Similar to filters, a Timeframe is used to narrow down the events used in an analysis request based on the time that the event occurred.
     */
    public GetMedianResourceInputBuilder timeframe(String timeframe) {
        getMedianResourceInput.setTimeframe(timeframe);
        return this;
    }

    /**
     * Modifies the timeframe filters for Relative Timeframes to match a specific timezone.
     */
    public GetMedianResourceInputBuilder timezone(String timezone) {
        getMedianResourceInput.setTimezone(timezone);
        return this;
    }

    public GetMedianResourceInputBuilder version(String version) {
        getMedianResourceInput.setVersion(version);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public GetMedianResourceInput build() {
        return getMedianResourceInput;
    }
}