/*
 * KeenIoLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2016
 */
package io.keen.api.models;

import java.util.*;

public class GetPercentileResourceInputBuilder {
    //the instance to build
    private GetPercentileResourceInput getPercentileResourceInput;

    /**
     * Default constructor to initialize the instance
     */
    public GetPercentileResourceInputBuilder() {
        getPercentileResourceInput = new GetPercentileResourceInput();
    }

    /**
     * The name of the event collection you are analyzing.
     */
    public GetPercentileResourceInputBuilder eventCollection(String eventCollection) {
        getPercentileResourceInput.setEventCollection(eventCollection);
        return this;
    }

    public GetPercentileResourceInputBuilder projectId(String projectId) {
        getPercentileResourceInput.setProjectId(projectId);
        return this;
    }

    /**
     * he name of the property you are analyzing. percentile (required) - The specific percentile you wish to calculate, supporting 0-100 with two decimal places of precision for example, 99.99
     */
    public GetPercentileResourceInputBuilder targetProperty(String targetProperty) {
        getPercentileResourceInput.setTargetProperty(targetProperty);
        return this;
    }

    public GetPercentileResourceInputBuilder version(String version) {
        getPercentileResourceInput.setVersion(version);
        return this;
    }

    /**
     * Filters are used to narrow down the events used in an analysis request based on event property values.
     */
    public GetPercentileResourceInputBuilder filters(String filters) {
        getPercentileResourceInput.setFilters(filters);
        return this;
    }

    /**
     * The Group By parameter specifies the name of a property by which you would like to group the results. Using this parameter changes the response format.
     */
    public GetPercentileResourceInputBuilder groupBy(String groupBy) {
        getPercentileResourceInput.setGroupBy(groupBy);
        return this;
    }

    /**
     * An Interval specifies the size of time block to break a response into. This will cause a change in the response shape.
     */
    public GetPercentileResourceInputBuilder interval(String interval) {
        getPercentileResourceInput.setInterval(interval);
        return this;
    }

    /**
     * imilar to filters, a Timeframe is used to narrow down the events used in an analysis request based on the time that the event occurred.
     */
    public GetPercentileResourceInputBuilder timeframe(String timeframe) {
        getPercentileResourceInput.setTimeframe(timeframe);
        return this;
    }

    /**
     * A Timezone modifies the timeframe filters for Relative Timeframes to match a specific timezone.
     */
    public GetPercentileResourceInputBuilder timezone(String timezone) {
        getPercentileResourceInput.setTimezone(timezone);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public GetPercentileResourceInput build() {
        return getPercentileResourceInput;
    }
}