/*
 * KeenIoLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2016
 */
package io.keen.api.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class GetEventCollectionResourceInput 
        implements java.io.Serializable {
    private static final long serialVersionUID = 4991365834803939061L;
    private String eventCollection;
    private String projectId;
    private String version;
    private String data;
    private String filters;
    private String redirect;
    private String timeframe;
    private String timezone;
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("event_collection")
    public String getEventCollection ( ) { 
        return this.eventCollection;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("event_collection")
    public void setEventCollection (String value) { 
        this.eventCollection = value;
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("project_id")
    public String getProjectId ( ) { 
        return this.projectId;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("project_id")
    public void setProjectId (String value) { 
        this.projectId = value;
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("version")
    public String getVersion ( ) { 
        return this.version;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("version")
    public void setVersion (String value) { 
        this.version = value;
    }
 
    /** GETTER
     * The event body you want to save to Keen IO, URL-encoded AND base-64 encoded
     */
    @JsonGetter("data")
    public String getData ( ) { 
        return this.data;
    }
    
    /** SETTER
     * The event body you want to save to Keen IO, URL-encoded AND base-64 encoded
     */
    @JsonSetter("data")
    public void setData (String value) { 
        this.data = value;
    }
 
    /** GETTER
     * he filters to use when deleting events. See Filters for more information.
     */
    @JsonGetter("filters")
    public String getFilters ( ) { 
        return this.filters;
    }
    
    /** SETTER
     * he filters to use when deleting events. See Filters for more information.
     */
    @JsonSetter("filters")
    public void setFilters (String value) { 
        this.filters = value;
    }
 
    /** GETTER
     * The URL you want to redirect the user to after the event is saved. If you don?t include a protocol (http:// or https://), we?ll automatically add that for you.
     */
    @JsonGetter("redirect")
    public String getRedirect ( ) { 
        return this.redirect;
    }
    
    /** SETTER
     * The URL you want to redirect the user to after the event is saved. If you don?t include a protocol (http:// or https://), we?ll automatically add that for you.
     */
    @JsonSetter("redirect")
    public void setRedirect (String value) { 
        this.redirect = value;
    }
 
    /** GETTER
     * The timeframe to use when deleting events. See Timeframe for more information.
     */
    @JsonGetter("timeframe")
    public String getTimeframe ( ) { 
        return this.timeframe;
    }
    
    /** SETTER
     * The timeframe to use when deleting events. See Timeframe for more information.
     */
    @JsonSetter("timeframe")
    public void setTimeframe (String value) { 
        this.timeframe = value;
    }
 
    /** GETTER
     * The timezone to use when specifying a timeframe (while deleting events). See Timezone for more information.
     */
    @JsonGetter("timezone")
    public String getTimezone ( ) { 
        return this.timezone;
    }
    
    /** SETTER
     * The timezone to use when specifying a timeframe (while deleting events). See Timezone for more information.
     */
    @JsonSetter("timezone")
    public void setTimezone (String value) { 
        this.timezone = value;
    }
 
}
 