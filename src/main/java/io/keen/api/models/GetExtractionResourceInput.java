/*
 * KeenIoLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2016
 */
package io.keen.api.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class GetExtractionResourceInput 
        implements java.io.Serializable {
    private static final long serialVersionUID = 4883117758130440128L;
    private String eventCollection;
    private String projectId;
    private String version;
    private String email;
    private String filters;
    private Integer latest;
    private String propertyNames;
    private String timeframe;
    /** GETTER
     * The name of the event collection you are analyzing.
     */
    @JsonGetter("event_collection")
    public String getEventCollection ( ) { 
        return this.eventCollection;
    }
    
    /** SETTER
     * The name of the event collection you are analyzing.
     */
    @JsonSetter("event_collection")
    public void setEventCollection (String value) { 
        this.eventCollection = value;
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("project_id")
    public String getProjectId ( ) { 
        return this.projectId;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("project_id")
    public void setProjectId (String value) { 
        this.projectId = value;
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("version")
    public String getVersion ( ) { 
        return this.version;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("version")
    public void setVersion (String value) { 
        this.version = value;
    }
 
    /** GETTER
     * If an email address is specified, an email will be sent to it when your extraction is ready for download. If email is not specified, your extraction will be processed synchronously and your data will be returned as JSON.
     */
    @JsonGetter("email")
    public String getEmail ( ) { 
        return this.email;
    }
    
    /** SETTER
     * If an email address is specified, an email will be sent to it when your extraction is ready for download. If email is not specified, your extraction will be processed synchronously and your data will be returned as JSON.
     */
    @JsonSetter("email")
    public void setEmail (String value) { 
        this.email = value;
    }
 
    /** GETTER
     * Filters are used to narrow down the events used in an analysis request based on event property values.
     */
    @JsonGetter("filters")
    public String getFilters ( ) { 
        return this.filters;
    }
    
    /** SETTER
     * Filters are used to narrow down the events used in an analysis request based on event property values.
     */
    @JsonSetter("filters")
    public void setFilters (String value) { 
        this.filters = value;
    }
 
    /** GETTER
     * An integer containing the number of most recent events to extract.
     */
    @JsonGetter("latest")
    public Integer getLatest ( ) { 
        return this.latest;
    }
    
    /** SETTER
     * An integer containing the number of most recent events to extract.
     */
    @JsonSetter("latest")
    public void setLatest (Integer value) { 
        this.latest = value;
    }
 
    /** GETTER
     * A URL-encoded array of strings containing properties you wish to extract. If this parameter is omitted, all properties will be returned.
     */
    @JsonGetter("property_names")
    public String getPropertyNames ( ) { 
        return this.propertyNames;
    }
    
    /** SETTER
     * A URL-encoded array of strings containing properties you wish to extract. If this parameter is omitted, all properties will be returned.
     */
    @JsonSetter("property_names")
    public void setPropertyNames (String value) { 
        this.propertyNames = value;
    }
 
    /** GETTER
     * A Timeframe specifies the events to use for analysis based on a window of time.
     */
    @JsonGetter("timeframe")
    public String getTimeframe ( ) { 
        return this.timeframe;
    }
    
    /** SETTER
     * A Timeframe specifies the events to use for analysis based on a window of time.
     */
    @JsonSetter("timeframe")
    public void setTimeframe (String value) { 
        this.timeframe = value;
    }
 
}
 